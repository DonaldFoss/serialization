/*
 * Hacked JSON grammar that uses `key` instead of a quoted string.  Admissible
 * keys follow c++'s admissible keys.
 */

JSON_text
  = ws value:value ws { return value; }

begin_array = ws "[" ws
begin_object = ws "(" ws
end_array = ws "]" ws
end_object = ws ")" ws
name_separator = ws "=" ws
value_separator = ws "," ws

ws "whitespace" = [ \t\n\r]*

/* ----- Values ----- */

value
  = false
  / void
  / true
  / object
  / array
  / number
  / string
  / identifier

false = "false" { return false; }
void = "void" { return null; }
true = "true" { return true; }

/* ----- Objects ----- */

object
  = begin_object
    members:(
      first:member
      rest:(value_separator m:member { return m; })*
      {
        var result = {}, i;

        result[first.name] = first.value;

        for (i = 0; i < rest.length; i++) {
          result[rest[i].name] = rest[i].value;
        }

        return result;
      }
    )?
    end_object
    { return members !== null ? members: {}; }

member
  = name:key name_separator value:value {
      return { name: name, value: value };
    }

/* ----- Arrays ----- */

array
  = begin_array
    values:(
      first:value
      rest:(value_separator v:value { return v; })*
      { return [first].concat(rest); }
    )?
    end_array
    { return values !== null ? values : []; }

/* ----- Numbers ----- */

number "number"
  = minus? int frac? exp? { return text(); }

decimal_point = "."
digit1_9 = [1-9]
e = [eE]
exp = e (minus / plus)? DIGIT+
frac = decimal_point DIGIT+
int = zero / (digit1_9 DIGIT*)
minus = "-"
plus = "+"
zero = "0"

/* ----- Strings ----- */

string "string"
  = quotation_mark chars:char* quotation_mark { return chars.join(""); }

char
  = unescaped
  / escape
    sequence:(
        '"'
      / "\\"
      / "/"
      / "b" { return "\b"; }
      / "f" { return "\f"; }
      / "n" { return "\n"; }
      / "r" { return "\r"; }
      / "t" { return "\t"; }
      / "u" digits:$(HEXDIG HEXDIG HEXDIG HEXDIG) {
          return String.fromCharCode(parseInt(digits, 16));
        }
    )
    { return sequence; }

escape = "\\"
quotation_mark = '"'
unescaped = [\x20-\x21\x23-\x5B\x5D-\u10FFFF]

/* ----- Identifiers ----- */

identifier "identifier"
  = first:[a-z] nonfirsts:[a-zA-Z]* { return first + nonfirsts.join(""); }

/* ----- Keys ----- */

key "key"
  = chars:([_a-zA-Z] [_a-zA-Z0-9]*) { return text(); }

/* ----- Core ABNF Rules ----- */

DIGIT = [0-9]
HEXDIG = [0-9a-f]i
